# Generated by Django 3.2.10 on 2022-01-07 22:46

from django.db import migrations
from django.db.backends.postgresql.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.conf import settings
from io import BytesIO
from typing import Tuple

from zerver.lib.upload import upload_backend, upload_emoji_image, read_local_file
from zerver.lib.upload import read_s3_file, LocalUploadBackend, S3UploadBackend


class UnsupportedBackendException(Exception):
    pass


def get_emoji_file(realm_emoji) -> Tuple[str, BytesIO]:
    """
    Given a RealEmoji object, returns the filename and image data
    in bytes depending on the upload backend being used.

    The magic strings for base_path are derived from the RealmEmoji class
    attribute PATH_ID_TEMPLATE but we cannot import that directly
    in migrations.
    """
    if type(upload_backend) == LocalUploadBackend:
        base_path = "{local_uploads_dir}/avatars/{realm_id}/emoji/images/{emoji_file_name}".format(
            local_uploads_dir=settings.LOCAL_UPLOADS_DIR,
            realm_id=realm_emoji.realm_id,
            emoji_file_name=realm_emoji.file_name
        )
        path_to_original = ".".join((base_path, "original"))
        image_bytes = read_local_file('avatars', path_to_original)

    elif type(upload_backend) == S3UploadBackend:
        base_path = "{realm_id}/emoji/images/{emoji_file_name}".format(
            realm_id=realm_emoji.realm_id,
            emoji_file_name=realm_emoji.file_name,
        )
        path_to_original = ".".join((base_path, "original"))
        image_bytes = read_s3_file(settings.S3_AVATAR_BUCKET, path_to_original)

    else:
        raise UnsupportedBackendException("Unsupported backend: {}".format(upload_backend))

    return realm_emoji.file_name, BytesIO(image_bytes)


def forwards(apps: StateApps, schema: DatabaseSchemaEditor) -> None:
    RealmEmoji = apps.get_model("zerver", "RealmEmoji")
    UserProfile = apps.get_model("zerver", "UserProfile")

    for realm_emoji in RealmEmoji.objects.all():
        emoji_filename, emoji_file = get_emoji_file(realm_emoji)
        user_profile = realm_emoji.author
        if user_profile is None:
            user_profile = UserProfile.objects.filter(realm=realm_emoji.realm, is_active=True, role=UserProfile.ROLE_OWNER).first()
            # From timabbot's comment in https://github.com/zulip/zulip/issues/19732
            # Should we mark the first owner as the uploader of this custom emoji while we're at it?
            # This would establish for the future the invariant that all custom emoji have an owner.
        realm_emoji.is_animated = upload_emoji_image(emoji_file, emoji_filename, user_profile)
        realm_emoji.save(update_fields=["author", "is_animated"])


def reverse(apps: StateApps, schema: DatabaseSchemaEditor) -> None:
    # noop
    pass


class Migration(migrations.Migration):
    """
    Re-uploads all RealmEmojis so the is_animated attribute
    can be detected and set properly. This migration's forward
    method should be idempotent and the reverse is a non-operation.
    """
    atomic = False  # Does not need to be run in a database transaction

    dependencies = [
        ('zerver', '0374_backfill_user_delete_realmauditlog'),
    ]

    operations = [
        migrations.RunPython(
            forwards,
            reverse,
            elidable=True,  # Removes this migration if migrations are squashed
        )
    ]
